import logging, time, flask, telebot, constants, mysql.connector, random
from telebot import types

cnx = mysql.connector.connect(host=constants.db_host,
                              user=constants.db_user,
                              password=constants.db_passwd,
                              database=constants.db_base)
print(cnx)
cursor = cnx.cursor(buffered=True)
cnx.autocommit = True
# Webhook settings
WEBHOOK_HOST = constants.webhook_host
WEBHOOK_PORT = 88  # 443, 80, 88 or 8443 (port need to be 'open')
WEBHOOK_LISTEN = '0.0.0.0'  # In some VPS you may need to put here the IP addr

WEBHOOK_SSL_CERT = './webhook_cert.pem'  # Path to the ssl certificate
WEBHOOK_SSL_PRIV = './webhook_pkey.pem'  # Path to the ssl private key

WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % constants.token

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

# Init bot

bot = telebot.TeleBot(constants.token)

app = flask.Flask(__name__)

# Keyboards
admin_chat_id = constants.admins

main_menu = types.ReplyKeyboardMarkup(True)
main_menu.row("üì¢–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É")
main_menu.row("ü§ù–í–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É")
main_menu.row("üöÄ–ü—Ä–æ –ø—Ä–æ–µ–∫—Ç")
main_menu.row("üé≤Giveaway –∫–æ–¥")

uni_markup = types.ReplyKeyboardMarkup(True)
uni_markup.row("–õ–ù–¢–£")
uni_markup.row("–°–ù–£")

change_uni = types.ReplyKeyboardMarkup(True)
change_uni.row("–¢–∞–∫")
change_uni.row("–ù—ñ")

LNTU_markup = types.ReplyKeyboardMarkup(True)
LNTU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö –Ω–∞—É–∫ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π")
LNTU_markup.row("–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç(–¢–§)")
LNTU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏, –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞ —Ç–∞ –¥–∏–∑–∞–π–Ω—É ")
LNTU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤, –æ–±–ª—ñ–∫—É, –ª—ñ–Ω–≥–≤—ñ—Å—Ç–∏–∫–∏ —Ç–∞ –ø—Ä–∞–≤–∞ ")
LNTU_markup.row("–ú–∞—à–∏–Ω–æ–±—É–¥—ñ–≤–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (–ú–ë–§)")
LNTU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –µ–∫–æ–ª–æ–≥—ñ—ó, —Ç—É—Ä–∏–∑–º—É —Ç–∞ –µ–ª–µ–∫—Ç—Ä–æ—ñ–Ω–∂–µ–Ω–µ—Ä—ñ—ó")
LNTU_markup.row("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É")

SNU_markup = types.ReplyKeyboardMarkup(True)
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ—ñ–∑–∏—á–Ω–æ—ó –∫—É–ª—å—Ç—É—Ä–∏, —Å–ø–æ—Ä—Ç—É —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è")
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –ø–µ–¥–∞–≥–æ–≥—ñ—á–Ω–æ—ó –æ—Å–≤—ñ—Ç–∏ —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏")
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –µ–∫–æ–Ω–æ–º—ñ–∫–∏ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —ñ–Ω–æ–∑–µ–º–Ω–æ—ó —Ñ—ñ–ª–æ–ª–æ–≥—ñ—ó")
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ—ñ–ª–æ–ª–æ–≥—ñ—ó —Ç–∞ –∂—É—Ä–Ω–∞–ª—ñ—Å—Ç–∏–∫–∏")
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —ñ—Å—Ç–æ—Ä—ñ—ó, –ø–æ–ª—ñ—Ç–æ–ª–æ–≥—ñ—ó —Ç–∞ –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—ó –±–µ–∑–ø–µ–∫–∏")
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —Ö—ñ–º—ñ—ó, –µ–∫–æ–ª–æ–≥—ñ—ó —Ç–∞ —Ñ–∞—Ä–º–∞—Ü—ñ—ó")
SNU_markup.row("–Æ—Ä–∏–¥–∏—á–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö –≤—ñ–¥–Ω–æ—Å–∏–Ω")
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π —ñ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏")
SNU_markup.row("–ù–∞–≤—á–∞–ª—å–Ω–æ-–Ω–∞—É–∫–æ–≤–∏–π —ñ–Ω—Å—Ç–∏—Ç—É—Ç –Ω–µ–ø–µ—Ä–µ—Ä–≤–Ω–æ—ó –æ—Å–≤—ñ—Ç–∏")
SNU_markup.row("–ö–æ–ª–µ–¥–∂ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π, –±—ñ–∑–Ω–µ—Å—É —Ç–∞ –ø—Ä–∞–≤–∞ –°—Ö—ñ–¥–Ω–æ—î–≤—Ä–æ–ø–µ–π—Å—å–∫–æ–≥–æ –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É —ñ–º–µ–Ω—ñ –õ–µ—Å—ñ –£–∫—Ä–∞—ó–Ω–∫–∏")
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –∫—É–ª—å—Ç—É—Ä–∏ —ñ –º–∏—Å—Ç–µ—Ü—Ç–≤")
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—ó —Ç–∞ —Å–æ—Ü—ñ–æ–ª–æ–≥—ñ—ó")
SNU_markup.row("–ú–µ–¥–∏–∫–æ-–±—ñ–æ–ª–æ–≥—ñ—á–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
SNU_markup.row("–ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
SNU_markup.row("–ü—ñ–¥–≥–æ—Ç–æ–≤—á–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")
SNU_markup.row("–ù–∞–≤—á–∞–ª—å–Ω–æ-–Ω–∞—É–∫–æ–≤–∏–π —Ñ—ñ–∑–∏–∫–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π —ñ–Ω—Å—Ç–∏—Ç—É—Ç")
SNU_markup.row("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É")

vote = types.ReplyKeyboardMarkup(True)
vote.row("üëç")
vote.row("üëé")

select = types.ReplyKeyboardMarkup(True)
select.row("5 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö")
select.row("5 –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö")

remove_keyboard = types.ReplyKeyboardRemove()

about_inline = types.InlineKeyboardMarkup(True)
url_buttom = types.InlineKeyboardButton(text='–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ—Ö—ñ–¥:', url='http://www.studitor.com')
about_inline.add(url_buttom)


# Empty webserver index, return nothing, just http 200
@app.route('/', methods=['GET', 'HEAD'])
def index():
    return ''


def listToString(s):
    str1 = ""
    for ele in s:
        str1 = str1 + " " + ele
    return str1


def listToString2(s):
    str1 = ""
    for ele in s:
        str1 = str(str1) + " " + str(ele)
    return str1


def extract_unique_code(text):
    # Extracts the unique_code from the sent /start command.
    return text.split()[1] if len(text.split()) > 1 else None


# Process webhook calls
@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    if flask.request.headers.get('content-type') == 'application/json':
        json_string = flask.request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        flask.abort(403)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    print(call.message.chat.id)
    print(call.data)
    if call.message:
        data = call.data
        data = data.split(" ")
        id = data[0]
        vote = data[1]
        cursor.execute("SELECT voted FROM petition_void WHERE id="+str(id))
        voted = cursor.fetchone()
        print(voted)
        print(call.message.message_id)
        if voted[0] is None:
            cursor.execute("UPDATE petition_void SET voted='"+str(call.message.chat.id)+" 1' WHERE id="+str(id))
            if vote == "yes":
                cursor.execute("SELECT yes FROM petition_void WHERE id="+str(id))
                count = cursor.fetchone()[0]
                cursor.execute("UPDATE petition_void SET yes="+str(int(count) + 1)+" WHERE id="+str(id))
                print(call.message.message_id)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞.")
            if vote == "no":
                cursor.execute("SELECT no FROM petition_void WHERE id="+str(id))
                count = cursor.fetchone()[0]
                cursor.execute("UPDATE petition_void SET no="+str(int(count) + 1)+" WHERE id="+str(id))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –ø—Ä–æ—Ç–∏.")
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏.")

        else:
            list = voted[0].split(" ")
            if str(call.message.chat.id) in list:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏.")
                bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–í–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏")
            else:
                new_voted = voted[0] + " " + str(call.message.chat.id)
                cursor.execute("UPDATE petition_void SET voted='"+str(new_voted)+"' WHERE id="+str(id))
                if vote == "yes":
                    cursor.execute("SELECT yes FROM petition_void WHERE id=" + str(id))
                    count = cursor.fetchone()[0]
                    cursor.execute("UPDATE petition_void SET yes=" + str(int(count) + 1) + " WHERE id=" + str(id))
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞.")
                if vote == "no":
                    cursor.execute("SELECT yes FROM petition_void WHERE id=" + str(id))
                    count = cursor.fetchone()[0]
                    cursor.execute("UPDATE petition_void SET yes=" + str(int(count) + 1) + " WHERE id=" + str(id))
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –ø—Ä–æ—Ç–∏.")
                bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏.")


@bot.message_handler(commands=['codes'])
def codes(message):
    cursor.execute("SELECT codes FROM users WHERE id={}".format(str(message.from_user.id)))
    codes = cursor.fetchone()
    if codes[0] is None:
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∫–æ–¥—É.")
    else:
        codes_list = codes[0].split(" ")
        print(codes_list)
        text = "–í–∞—à—ñ giveaway –∫–æ–¥–∏:"
        for code in codes_list:
            text = text + "\n" + code
        bot.send_message(message.from_user.id, text)



@bot.message_handler(commands=['call'])
def call(message):
    if message.chat.id == admin_chat_id:
        id = message.text.split(' ')[1]
        cursor.execute("UPDATE users SET caller='" + str(message.from_user.id) + "' WHERE id=" + str(id))
        cursor.execute("UPDATE users SET caller='" + str(id) + "' WHERE id=" + str(message.from_user.id))
        cursor.execute("UPDATE users SET step='calling' WHERE id=" + str(id))
        cursor.execute("UPDATE users SET step='calling' WHERE id=" + str(message.from_user.id))
        bot.send_message(message.from_user.id, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
        try:
            bot.send_message(id, "–î–æ –≤–∞—Å –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
            bot.send_message(message.from_user.id, "–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ. –î–ª—è –∫—ñ–Ω—Ü—è —Ä–æ–∑–º–æ–≤–∏ –Ω–∞–ø–∏—à—ñ—Ç—å /end –≤ —á–∞—Ç—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        except Exception as e:
            bot.send_message(message.from_user.id, "–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—å. –ü–æ–º–∏–ª–∫–∞:\n" + str(e))
            cursor.execute("UPDATE users SET caller='0' WHERE id=" + str(id))
            cursor.execute("UPDATE users SET caller='0' WHERE id=" + str(message.from_user.id))
            cursor.execute("UPDATE users SET step='main_menu' WHERE id=" + str(id))
            cursor.execute("UPDATE users SET step='main_menu' WHERE id=" + str(message.from_user.id))

@bot.message_handler(commands=["end"])
def end_call(message):
    if message.chat.id == admin_chat_id:
       cursor.execute("SELECT caller FROM users WHERE id={}".format(message.from_user.id))
       data = cursor.fetchone()
       cursor.execute("UPDATE users SET step='main_menu' WHERE id={}".format(data[0]))
       bot.send_message(data[0], "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è", reply_markup=main_menu)
       cursor.execute("UPDATE users SET step='main_menu' WHERE id={}".format(message.from_user.id))
       bot.send_message(admin_chat_id, 'Success')

@bot.message_handler(commands=['apply'])
def apply(message):
    if message.chat.id == admin_chat_id:
        id = message.text.split(' ')[1]
        print(id)
        bot.send_message(message.chat.id, '–û–∫–µ–π. –í–∫–ª—é—á–∞—é –≤–∏–¥–∏–º—ñ—Å—Ç—å.')
        cursor.execute("UPDATE petitions SET visible=1 WHERE petition_id=" + str(id))
        cursor.execute("SELECT * FROM petitions WHERE petition_id=" + str(id))
        data = cursor.fetchone()
        cursor.execute("UPDATE petitions SET signatures='" + str(data[1]) + "' WHERE petition_id=" + str(id))
        bot.send_message(data[1], '–í–∞—à–∞ –ø–µ—Ç–∏—Ü—ñ—è <i>\n\n"' + str(data[4]) + '"</i>\n\n–±—É–ª–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞.',
                         parse_mode='HTML')


@bot.message_handler(commands=['view'])
def view(message):
    if message.chat.type == "private":
        id = message.text.split(' ')[1]
        print(id)
        cursor.execute("SELECT * FROM petition_void WHERE id=" + str(id))
        data = cursor.fetchone()
        cursor.execute("UPDATE users SET vote_id='" + str(id) + "' WHERE id=" + str(message.from_user.id))
        cursor.execute("UPDATE users SET step='voting' WHERE id=" + str(message.from_user.id))
        bot.send_message(message.from_user.id,
                         "–ü—Ä–æ–±–ª–µ–º–∞ #" + str(id) + "\n" + str(data[1]) + "\nüëç" + str(data[2]) + "|üëé" + str(data[3]),
                         reply_markup=vote)


@bot.message_handler(commands=['broadcast'])
def broadcast_handler(message):
    if message.chat.id == admin_chat_id:
        broadcast_message = message.text.split(" ")
        broadcast_message.pop(0)
        msg = listToString(broadcast_message)
        cursor.execute("SELECT id FROM users")
        ids = cursor.fetchall()
        print(ids)
        count = len(ids)
        new_count = 0
        for id in ids:
            try:
                time.sleep(0.3)
                bot.send_message(id[0], msg, reply_markup=main_menu)
                cursor.execute("UPDATE users SET step='main_menu' WHERE id="+str(id[0]))
                new_count += 1
            except:
                pass
        bot.send_message(admin_chat_id, '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ' + str(count) + ' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.\n–û—Ç—Ä–∏–º–∞–ª–∏ ' + str(new_count))


@bot.message_handler(commands=['start'])
def start_handler(message):
    if message.chat.type == 'private':
        try:
            unique_code = extract_unique_code(message.text)
            print(message.from_user.id)
            cursor.execute("SELECT step FROM users WHERE id=" + str(message.from_user.id))
            data = cursor.fetchone()
            print(data)
            if data is None:
                cursor.execute("INSERT INTO users(id,step) VALUES('" + str(message.from_user.id) + "', 'main_menu')")
                bot.send_message(message.from_user.id, """
                –ü—Ä–∏–≤—ñ—Ç, """ + str(message.from_user.first_name) + """‚ò∫
üéìStuditor
‚ùï–¶–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —è–∫–∞ –ø–æ—î–¥–Ω—É—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –±–∞—á–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é, —è–∫–∞ –º–æ–∂–µ —ó—Ö –≤–∏—Ä—ñ—à–∏—Ç–∏
                """, reply_markup=main_menu)
                if unique_code:
                    print(unique_code)
                    cursor.execute("UPDATE users SET start_provider='" + str(unique_code) + "' WHERE id=" + str(
                        message.from_user.id))
            else:
                if data[0] == "calling":
                    pass
                else:
                    bot.send_message(message.from_user.id, """–ü—Ä–∏–≤—ñ—Ç, """ + str(message.from_user.first_name) + """
üéìStuditor
‚ùï–¶–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —è–∫–∞ –ø–æ—î–¥–Ω—É—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –±–∞—á–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é, —è–∫–∞ –º–æ–∂–µ —ó—Ö –≤–∏—Ä—ñ—à–∏—Ç–∏""",
                                     reply_markup=main_menu)
                    cursor.execute("UPDATE users SET step='main_menu' WHERE id=" + str(message.from_user.id))
        except:
            cnx.reconnect(10, 1)




@bot.message_handler(content_types=['text'])
def text_handler(message):
    try:
        cnx.reconnect(1, 0)
        print(message.text)
        if message.chat.type == 'private':
            cursor.execute("SELECT step FROM users WHERE id=" + str(message.from_user.id))
            data = cursor.fetchone()
            print(data)
            if data[0] == "uni_vote_select":
                bot.send_message(message.from_user.id, "–°—É–ø–µ—Ä. –¢–µ–ø–µ—Ä —è –∑–Ω–∞—é –ø—Ä–æ–±–ª–µ–º–∏ —è–∫–æ–≥–æ —É–Ω—ñ–≤–µ—Ä–∞ –≤–∞–º –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏.", reply_markup=main_menu)
                cursor.execute("UPDATE users SET uni='{}' WHERE id={}".format(message.text, message.from_user.id))
                cursor.execute("UPDATE users SET step='main_menu' WHERE id={}".format(message.from_user.id))
            if data[0] == 'calling':
                cursor.execute("SELECT caller FROM users WHERE id={}".format(message.from_user.id))
                uid = cursor.fetchone()
                print(uid)
                bot.send_message(uid[0], message.text)
                print(message.text)
            if data[0] == 'select':
                if message.text == "5 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö":
                    cursor.execute("SELECT uni FROM users WHERE id=" + str(message.from_user.id))
                    uni = cursor.fetchone()[0]
                    print(uni)
                    if uni is None:
                        cursor.execute("UPDATE users SET step='uni_vote_select' WHERE id=" + str(message.from_user.id))
                        bot.send_message(message.from_user.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.",
                                         reply_markup=uni_markup)
                    else:
                        print("else")
                        cursor.execute("SELECT uni FROM users WHERE id=" + str(message.from_user.id))
                        uni = cursor.fetchone()[0]
                        cursor.execute("SELECT MAX(view) FROM petition_void")
                        maximal = cursor.fetchone()[0]
                        print(maximal)
                        cursor.execute(
                            "SELECT petition_add.id FROM petition_add INNER JOIN petition_void ON "
                            "petition_add.id=petition_void.id WHERE petition_add.university='" + str(
                                uni) + "' AND view < " + str(maximal) + " ORDER BY RAND() LIMIT 5")
                        c = cursor.fetchall()
                        print(c)
                        if c == []:
                            print("true")
                            cursor.execute(
                                "SELECT petition_add.id FROM petition_add INNER JOIN petition_void ON "
                                "petition_add.id=petition_void.id WHERE petition_add.university='" + str(
                                    uni) + "' ORDER BY RAND() LIMIT 5")
                            c = cursor.fetchall()
                            print(c)
                            for d in c:
                                time.sleep(1)
                                print(d[0])
                                cursor.execute(
                                    "SELECT petition_add.title, petition_void.yes, petition_void.no FROM petition_add "
                                    "INNER JOIN petition_void ON petition_add.id=petition_void.id WHERE "
                                    "petition_void.id=" + str(d[0]) + " ORDER BY RAND() LIMIT 5")
                                info = cursor.fetchone()
                                print(info)
                                keyboard = types.InlineKeyboardMarkup()
                                yes_button = types.InlineKeyboardButton(text="üëç", callback_data=str(d[0]) + " yes")
                                no_button = types.InlineKeyboardButton(text="üëé", callback_data=str(d[0]) + " no")
                                keyboard.add(yes_button)
                                keyboard.add(no_button)
                                bot.send_message(message.from_user.id,
                                                 "–ü—Ä–æ–±–ª–µ–º–∞ #" + str(d[0]) + ":\n" + str(
                                                     info[0]) + "\n\nüëç" + str(
                                                     info[1]) + "|üëé" + str(
                                                     info[2]), parse_mode="HTML", reply_markup=keyboard)
                                cursor.execute("SELECT view FROM petition_void WHERE id=" + str(d[0]))
                                views = cursor.fetchone()[0]
                                cursor.execute(
                                    "UPDATE petition_void SET view='" + str(views + 1) + "' WHERE id=" + str(d[0]))
                            bot.send_message(message.from_user.id,
                                             "–©–æ–± –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ –ø—Ä–æ–±–ª–µ–º—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–æ—é.",
                                             reply_markup=main_menu)
                            cursor.execute("UPDATE users SET step='main_menu' WHERE id=" + str(message.from_user.id))
                        else:
                            for id in c:
                                time.sleep(1)
                                print(id[0])
                                cursor.execute(
                                    "SELECT petition_add.title, petition_void.yes, petition_void.no FROM petition_add "
                                    "INNER JOIN petition_void ON petition_add.id=petition_void.id WHERE "
                                    "petition_void.id=" + str(
                                        id[0]))
                                data = cursor.fetchone()
                                print(data)
                                keyboard = types.InlineKeyboardMarkup()
                                yes_button = types.InlineKeyboardButton(text="üëç", callback_data=str(id[0]) + " yes")
                                no_button = types.InlineKeyboardButton(text="üëé", callback_data=str(id[0]) + " no")
                                keyboard.add(yes_button, no_button)
                                bot.send_message(message.from_user.id,
                                                 "–ü—Ä–æ–±–ª–µ–º–∞ #" + str(id[0]) + ":\n" + str(data[0]) + "\n\nüëç" + str(
                                                     data[1]) + "|üëé" + str(
                                                     data[2]),parse_mode="HTML",reply_markup=keyboard)
                                cursor.execute("SELECT view FROM petition_void WHERE id=" + str(id[0]))
                                views = cursor.fetchone()[0]
                                cursor.execute(
                                    "UPDATE petition_void SET view='" + str(views + 1) + "' WHERE id=" + str(id[0]))
                            cursor.execute("UPDATE users SET step='main_menu' WHERE id=" + str(message.from_user.id))
                            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ü—ñ –ø—Ä–æ–±–ª–µ–º–∏. –í–æ–Ω–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∞—à–æ—ó —É–≤–∞–≥–∏.",
                                             reply_markup=main_menu)
                if message.text == "5 –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö":
                    cursor.execute("SELECT uni FROM users WHERE id=" + str(message.from_user.id))
                    uni = cursor.fetchone()[0]
                    print(uni)
                    if uni is None:
                        cursor.execute("UPDATE users SET step='uni_vote_select' WHERE id=" + str(message.from_user.id))
                        bot.send_message(message.from_user.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.",
                                         reply_markup=uni_markup)
                    else:
                        print("else")
                        cursor.execute("SELECT uni FROM users WHERE id=" + str(message.from_user.id))
                        uni = cursor.fetchone()[0]
                        cursor.execute("SELECT MAX(view) FROM petition_void")
                        maximal = cursor.fetchone()[0]
                        print(maximal)
                        cursor.execute(
                            "SELECT petition_add.id FROM petition_add INNER JOIN petition_void ON "
                            "petition_add.id=petition_void.id WHERE petition_add.university='" + str(
                                uni) + "' ORDER BY view DESC LIMIT 5")
                        c = cursor.fetchall()
                        print(c)
                        if c == []:
                            print("true")
                            cursor.execute(
                                "SELECT petition_add.id FROM petition_add INNER JOIN petition_void ON "
                                "petition_add.id=petition_void.id WHERE petition_add.university='" + str(
                                    uni) + "' ORDER BY view DESC LIMIT 5")
                            c = cursor.fetchall()
                            print(c)
                            for d in c:
                                time.sleep(1)
                                print(d[0])
                                cursor.execute(
                                    "SELECT petition_add.title, petition_void.yes, petition_void.no FROM petition_add "
                                    "INNER JOIN petition_void ON petition_add.id=petition_void.id WHERE "
                                    "petition_void.id=" + str(d[0]) + " ORDER BY view DESC LIMIT 5")
                                info = cursor.fetchone()
                                print(info)
                                keyboard = types.InlineKeyboardMarkup()
                                yes_button = types.InlineKeyboardButton(text="üëç", callback_data=str(d[0]) + " yes")
                                no_button = types.InlineKeyboardButton(text="üëé", callback_data=str(d[0]) + " no")
                                keyboard.add(yes_button, no_button)
                                bot.send_message(message.from_user.id,
                                                 "–ü—Ä–æ–±–ª–µ–º–∞ #" + str(d[0]) + ":\n" + str(data[0]) + "\n\nüëç" + str(
                                                     data[1]) + "|üëé" + str(
                                                     data[2]),parse_mode="HTML",reply_markup=keyboard)
                                cursor.execute("SELECT view FROM petition_void WHERE id=" + str(d[0]))
                                views = cursor.fetchone()[0]
                                cursor.execute(
                                    "UPDATE petition_void SET view='" + str(views + 1) + "' WHERE id=" + str(d[0]))
                            bot.send_message(message.from_user.id,
                                             "–©–æ–± –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ –ø—Ä–æ–±–ª–µ–º—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—ñ–¥ –ø—Ä–æ–±–ª–µ–º–æ—é.",
                                             reply_markup=main_menu)
                            cursor.execute("UPDATE users SET step='main_menu' WHERE id=" + str(message.from_user.id))
                        else:
                            for id in c:
                                time.sleep(1)
                                print(id[0])
                                cursor.execute(
                                    "SELECT petition_add.title, petition_void.yes, petition_void.no FROM petition_add "
                                    "INNER JOIN petition_void ON petition_add.id=petition_void.id WHERE "
                                    "petition_void.id=" + str(
                                        id[0]))
                                data = cursor.fetchone()
                                print(data)
                                keyboard = types.InlineKeyboardMarkup()
                                yes_button = types.InlineKeyboardButton(text="üëç", callback_data=str(id[0]) + " yes")
                                no_button = types.InlineKeyboardButton(text="üëé", callback_data=str(id[0]) + " no")
                                keyboard.add(yes_button, no_button)
                                bot.send_message(message.from_user.id,
                                                 "–ü—Ä–æ–±–ª–µ–º–∞ #" + str(id[0]) + ":\n" + str(data[0]) + "\n\nüëç" + str(
                                                     data[1]) + "|üëé" + str(
                                                     data[2]),parse_mode="HTML",reply_markup=keyboard)
                                cursor.execute("SELECT view FROM petition_void WHERE id=" + str(id[0]))
                                views = cursor.fetchone()[0]
                                cursor.execute(
                                    "UPDATE petition_void SET view='" + str(views + 1) + "' WHERE id=" + str(id[0]))
                            cursor.execute("UPDATE users SET step='main_menu' WHERE id=" + str(message.from_user.id))
                            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ü—ñ –ø—Ä–æ–±–ª–µ–º–∏. –í–æ–Ω–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∞—à–æ—ó —É–≤–∞–≥–∏.",reply_markup=main_menu)
            if data[0] == "main_menu":
                if message.text == "üé≤Giveaway –∫–æ–¥":
                    cursor.execute("SELECT codes FROM users WHERE id={}".format(str(message.from_user.id)))
                    codes = cursor.fetchone()
                    if codes[0] is None:
                        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∫–æ–¥—É.")
                    else:
                        codes_list = codes[0].split(" ")
                        print(codes_list)
                        text = "–í–∞—à giveaway –∫–æ–¥:"
                        for code in codes_list:
                            text = text + " " + code
                        bot.send_message(message.from_user.id, text)
                if message.text == "üöÄ–ü—Ä–æ –ø—Ä–æ–µ–∫—Ç":
                    bot.send_message(message.from_user.id, '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ <a href="studitor.com">—Å–∞–π—Ç</a>',
                                     reply_markup=about_inline, parse_mode='HTML')
                if message.text == "ü§ù–í–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É":
                    bot.send_message(message.from_user.id, '–Ø–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏ –±—É–¥–µ–º –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏?', reply_markup=select)
                    cursor.execute("UPDATE users SET step='select' WHERE id=" + str(message.from_user.id))
                if message.text == "üì¢–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É":
                    bot.send_message(message.from_user.id,
                                     "–ß—É–¥–æ–≤–æ. –ó–∞—á–µ–∫–∞–π—Ç–µ —Å–µ–∫—É–Ω–¥—É...",
                                     reply_markup=remove_keyboard)
                    cursor.execute("SELECT uni FROM users WHERE id=" + str(message.from_user.id))
                    uni = cursor.fetchone()
                    print(uni)
                    if uni[0] is None:
                        bot.send_message(message.from_user.id,
                                         'üßë‚Äçüéì–û–∫–µ–π, –≤–∏–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç',
                                         reply_markup=uni_markup)
                        cursor.execute("UPDATE users SET step='uni_select' WHERE id=" + str(message.from_user.id))
                    else:
                        cursor.execute("SELECT * FROM users WHERE id=" + str(message.from_user.id))
                        data = cursor.fetchone()
                        if data[5] is None:
                            markup = None
                            if data[4] == "–õ–ù–¢–£":
                                markup = LNTU_markup
                            if data[4] == "–°–ù–£":
                                markup = SNU_markup
                            bot.send_message(message.from_user.id,
                                             '–°—Ö–æ–∂–µ –≤–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç. –ß–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –≤–∏ –π–æ–≥–æ –æ–±—Ä–∞—Ç–∏?',
                                             reply_markup=markup)
                            cursor.execute("UPDATE users SET step='spec_select' WHERE id=" + str(message.from_user.id))
                        else:
                            cursor.execute("UPDATE users SET step='uni_reselect' WHERE id=" + str(message.from_user.id))
                            bot.send_message(message.from_user.id,
                                             '–•–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç —ñ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç?',
                                             reply_markup=change_uni)
            if data[0] == 'uni_reselect':
                if message.text == '–¢–∞–∫':
                    cursor.execute("UPDATE users SET step='uni_select' WHERE id=" + str(message.from_user.id))
                    bot.send_message(message.from_user.id,
                                     'üßë‚Äçüéì–û–∫–µ–π, –≤–∏–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç',
                                     reply_markup=uni_markup)
                if message.text == '–ù—ñ':
                    cursor.execute("UPDATE users SET step='petition_text' WHERE id=" + str(message.from_user.id))
                    cursor.execute(
                        "INSERT INTO petitions(author, views) VALUES('" + str(message.from_user.id) + "','1')")
                    cursor.execute(
                        "SELECT MAX(petition_id) FROM petitions WHERE author='" + str(message.from_user.id) + "'")
                    petition_id = cursor.fetchone()[0]
                    cursor.execute(
                        "UPDATE users SET current='" + str(petition_id) + "' WHERE id=" + str(message.from_user.id))
                    bot.send_message(message.from_user.id,
                                     '‚¨áÔ∏è–ù–∏–∂—á–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É —Ç–∞ –ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω–∏ —É–∂–µ –∑–∞—Ä–∞–∑',
                                     reply_markup=remove_keyboard)
            if data[0] == "uni_select":
                if message.text == '–õ–ù–¢–£':
                    bot.send_message(message.from_user.id, "–û–∫–µ–π. –ó —è–∫–æ–≥–æ –≤–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É?", reply_markup=LNTU_markup)
                    cursor.execute("UPDATE users SET uni='–õ–ù–¢–£' WHERE id=" + str(message.from_user.id))
                    cursor.execute("UPDATE users SET step='spec_select' WHERE id=" + str(message.from_user.id))
                if message.text == '–°–ù–£':
                    bot.send_message(message.from_user.id, "–û–∫–µ–π. –ó —è–∫–æ–≥–æ –≤–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É?", reply_markup=SNU_markup)
                    cursor.execute("UPDATE users SET uni='–°–ù–£' WHERE id=" + str(message.from_user.id))
                    cursor.execute("UPDATE users SET step='spec_select' WHERE id=" + str(message.from_user.id))
            if data[0] == 'spec_select':
                if message.text == '–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É':
                    cursor.execute("UPDATE users SET step='petition_text' WHERE id=" + str(message.from_user.id))
                    bot.send_message(message.from_user.id,
                                     '‚¨áÔ∏è–ù–∏–∂—á–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É —Ç–∞ –ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω–∏ —É–∂–µ –∑–∞—Ä–∞–∑',
                                     reply_markup=remove_keyboard)
                    cursor.execute(
                        "INSERT INTO petitions(author, views) VALUES('" + str(message.from_user.id) + "','1')")
                    cursor.execute(
                        "SELECT MAX(petition_id) FROM petitions WHERE author='" + str(message.from_user.id) + "'")
                    petition_id = cursor.fetchone()[0]
                    cursor.execute(
                        "UPDATE users SET current='" + str(petition_id) + "' WHERE id=" + str(message.from_user.id))
                else:
                    cursor.execute(
                        'UPDATE users SET spec="' + str(message.text) + '" WHERE id=' + str(message.from_user.id))
                    bot.send_message(message.from_user.id,
                                     '‚¨áÔ∏è–ù–∏–∂—á–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É —Ç–∞ –ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω–∏ —É–∂–µ –∑–∞—Ä–∞–∑',
                                     reply_markup=remove_keyboard)
                    cursor.execute(
                        "INSERT INTO petitions(author, views) VALUES('" + str(message.from_user.id) + "','1')")
                    cursor.execute(
                        "SELECT MAX(petition_id) FROM petitions WHERE author='" + str(message.from_user.id) + "'")
                    petition_id = cursor.fetchone()[0]
                    cursor.execute(
                        "UPDATE users SET current='" + str(petition_id) + "' WHERE id=" + str(message.from_user.id))
                    cursor.execute("UPDATE users SET step='petition_text' WHERE id=" + str(message.from_user.id))
            """if data[0] == 'petition_header':
                cursor.execute("SELECT current FROM users WHERE id="+str(message.from_user.id))
                petition_id = cursor.fetchone()[0]
                cursor.execute("UPDATE petitions SET heading='"+str(message.text)+"' WHERE petition_id="+str(petition_id))
                bot.send_message(message.from_user.id, "‚¨áÔ∏è–ù–∏–∂—á–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É —Ç–∞ –ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω–∏ —É–∂–µ –∑–∞—Ä–∞–∑")
                cursor.execute("UPDATE users SET step='petition_text' WHERE id=" + str(message.from_user.id))"""
            if data[0] == 'petition_text':
                cursor.execute("SELECT current FROM users WHERE id=" + str(message.from_user.id))
                petition_id = cursor.fetchone()[0]
                cursor.execute(
                    "UPDATE petitions SET text='" + str(message.text) + "' WHERE petition_id=" + str(petition_id))
                cursor.execute("SELECT author FROM users WHERE id=" + str(message.from_user.id))
                author = cursor.fetchone()[0]
                print(author)
                if author is None:
                    new_author = petition_id
                    cursor.execute("UPDATE users SET author='" + str(new_author) + "' WHERE id=" + str(message.chat.id))
                else:
                    new_author = str(author) + ' ' + str(petition_id)
                    cursor.execute("UPDATE users SET author='" + str(new_author) + "' WHERE id=" + str(message.chat.id))
                bot.send_message(message.from_user.id,
                                 'üí°–î—è–∫—É—î–º–æ –∑–∞ —Ç–µ, —â–æ –ø–æ–≤—ñ–¥–æ–º–∏–ª–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É. –í–∞—à–∞ –ø–µ—Ç–∏—Ü—ñ—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –≤–æ–Ω–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è.')
                bot.send_message(message.from_user.id, """
                                –ü—Ä–∏–≤—ñ—Ç, """ + str(message.from_user.first_name) + """‚ò∫\nüéìStuditor\n‚ùï–¶–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —è–∫–∞ –ø–æ—î–¥–Ω—É—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –±–∞—á–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é, —è–∫–∞ –º–æ–∂–µ —ó—Ö –≤–∏—Ä—ñ—à–∏—Ç–∏
                                """, reply_markup=main_menu)
                cursor.execute("UPDATE users SET step='main_menu' WHERE id=" + str(message.from_user.id))
                cursor.execute("SELECT current FROM users WHERE id=" + str(message.from_user.id))
                petition_id = cursor.fetchone()[0]
                cursor.execute("SELECT * FROM petitions WHERE petition_id=" + str(petition_id))
                petition_info = cursor.fetchone()
                cursor.execute("UPDATE users SET current='0' WHERE id=" + str(message.from_user.id))
                bot.send_message(admin_chat_id, '<b>–ù–æ–≤–∞ –ø–µ—Ç–∏—Ü—ñ—è!</b>''\n' + str(
                    petition_info[4]) + '\n\n–í–∫–ª—é—á–∏—Ç–∏ –≤–∏–¥–∏–º—ñ—Å—Ç—å: <code>/apply ' + str(petition_info[0]) + '</code>\n'
                                                                                                          '–ó–≤—è–∑–∞—Ç–∏—Å—å:<code>/call ' + str(
                    message.from_user.id) + '</code>',
                                 parse_mode='HTML')
    except:
        cnx.reconnect(10, 1)


# Remove webhook, it fails sometimes the set if there is a previous webhook
bot.remove_webhook()

time.sleep(1)

# Set webhook
bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
                certificate=open(WEBHOOK_SSL_CERT, 'r'))

# Start flask server
app.run(host=WEBHOOK_LISTEN,
        port=WEBHOOK_PORT,
        ssl_context=(WEBHOOK_SSL_CERT, WEBHOOK_SSL_PRIV),
        debug=True)

