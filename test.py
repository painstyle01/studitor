import logging, time, flask, telebot, constants, mysql.connector from 
telebot import types cnx = 
mysql.connector.connect(host=constants.db_host,
                              user=constants.db_user,
                              password=constants.db_passwd,
                              database=constants.db_base) print(cnx) 
cursor = cnx.cursor(buffered=True) cnx.autocommit = True
# Webhook settings
WEBHOOK_HOST = constants.webhook_host WEBHOOK_PORT = 88 # 443, 80, 88 or 
8443 (port need to be 'open') WEBHOOK_LISTEN = '0.0.0.0' # In some VPS 
you may need to put here the IP addr WEBHOOK_SSL_CERT = 
'./webhook_cert.pem' # Path to the ssl certificate WEBHOOK_SSL_PRIV = 
'./webhook_pkey.pem' # Path to the ssl private key WEBHOOK_URL_BASE = 
"https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT) WEBHOOK_URL_PATH = "/%s/" 
% constants.token logger = telebot.logger 
telebot.logger.setLevel(logging.INFO)
# Init bot
bot = telebot.TeleBot(constants.token) app = flask.Flask(__name__)
# Keyboards
admin_chat_id = constants.admins main_menu = 
types.ReplyKeyboardMarkup(True) main_menu.row("üì¢–ü–æ–¥–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é") 
main_menu.row("ü§ù–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é") main_menu.row("üöÄ–ü—Ä–æ –ø—Ä–æ–µ–∫—Ç") 
uni_markup = types.ReplyKeyboardMarkup(True) uni_markup.row("–õ–ù–¢–£") 
uni_markup.row("–°–ù–£") change_uni = types.ReplyKeyboardMarkup(True) 
change_uni.row("–¢–∞–∫") change_uni.row("–ù—ñ") LNTU_markup = 
types.ReplyKeyboardMarkup(True) LNTU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö 
–Ω–∞—É–∫ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π") LNTU_markup.row("–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π 
—Ñ–∞–∫—É–ª—å—Ç–µ—Ç(–¢–§)") LNTU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏, –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞ —Ç–∞ 
–¥–∏–∑–∞–π–Ω—É ") LNTU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤, –æ–±–ª—ñ–∫—É, –ª—ñ–Ω–≥–≤—ñ—Å—Ç–∏–∫–∏ —Ç–∞ 
–ø—Ä–∞–≤–∞ ") LNTU_markup.row("–ú–∞—à–∏–Ω–æ–±—É–¥—ñ–≤–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç (–ú–ë–§)") 
LNTU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –µ–∫–æ–ª–æ–≥—ñ—ó, —Ç—É—Ä–∏–∑–º—É —Ç–∞ –µ–ª–µ–∫—Ç—Ä–æ—ñ–Ω–∂–µ–Ω–µ—Ä—ñ—ó") 
LNTU_markup.row("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É") SNU_markup = 
types.ReplyKeyboardMarkup(True) SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ—ñ–∑–∏—á–Ω–æ—ó 
–∫—É–ª—å—Ç—É—Ä–∏, —Å–ø–æ—Ä—Ç—É —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è") SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –ø–µ–¥–∞–≥–æ–≥—ñ—á–Ω–æ—ó 
–æ—Å–≤—ñ—Ç–∏ —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏") SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –µ–∫–æ–Ω–æ–º—ñ–∫–∏ —Ç–∞ 
—É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è") SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —ñ–Ω–æ–∑–µ–º–Ω–æ—ó —Ñ—ñ–ª–æ–ª–æ–≥—ñ—ó") 
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —Ñ—ñ–ª–æ–ª–æ–≥—ñ—ó —Ç–∞ –∂—É—Ä–Ω–∞–ª—ñ—Å—Ç–∏–∫–∏") 
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —ñ—Å—Ç–æ—Ä—ñ—ó, –ø–æ–ª—ñ—Ç–æ–ª–æ–≥—ñ—ó —Ç–∞ –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—ó –±–µ–∑–ø–µ–∫–∏") 
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —Ö—ñ–º—ñ—ó, –µ–∫–æ–ª–æ–≥—ñ—ó —Ç–∞ —Ñ–∞—Ä–º–∞—Ü—ñ—ó") 
SNU_markup.row("–Æ—Ä–∏–¥–∏—á–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç") SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç 
–º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö –≤—ñ–¥–Ω–æ—Å–∏–Ω") SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö 
—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π —ñ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏") SNU_markup.row("–ù–∞–≤—á–∞–ª—å–Ω–æ-–Ω–∞—É–∫–æ–≤–∏–π —ñ–Ω—Å—Ç–∏—Ç—É—Ç 
–Ω–µ–ø–µ—Ä–µ—Ä–≤–Ω–æ—ó –æ—Å–≤—ñ—Ç–∏") SNU_markup.row("–ö–æ–ª–µ–¥–∂ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π, –±—ñ–∑–Ω–µ—Å—É —Ç–∞ –ø—Ä–∞–≤–∞ 
–°—Ö—ñ–¥–Ω–æ—î–≤—Ä–æ–ø–µ–π—Å—å–∫–æ–≥–æ –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É —ñ–º–µ–Ω—ñ –õ–µ—Å—ñ –£–∫—Ä–∞—ó–Ω–∫–∏") 
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –∫—É–ª—å—Ç—É—Ä–∏ —ñ –º–∏—Å—Ç–µ—Ü—Ç–≤") 
SNU_markup.row("–§–∞–∫—É–ª—å—Ç–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—ó —Ç–∞ —Å–æ—Ü—ñ–æ–ª–æ–≥—ñ—ó") 
SNU_markup.row("–ú–µ–¥–∏–∫–æ-–±—ñ–æ–ª–æ–≥—ñ—á–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç") 
SNU_markup.row("–ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç") SNU_markup.row("–ü—ñ–¥–≥–æ—Ç–æ–≤—á–µ 
–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è") SNU_markup.row("–ù–∞–≤—á–∞–ª—å–Ω–æ-–Ω–∞—É–∫–æ–≤–∏–π —Ñ—ñ–∑–∏–∫–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π 
—ñ–Ω—Å—Ç–∏—Ç—É—Ç") SNU_markup.row("–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É") remove_keyboard = 
types.ReplyKeyboardRemove() about_inline = 
types.InlineKeyboardMarkup(True) url_buttom = 
types.InlineKeyboardButton(text='–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ—Ö—ñ–¥:', 
url='http://www.studitor.com') about_inline.add(url_buttom)
# Empty webserver index, return nothing, just http 200
@app.route('/', methods=['GET', 'HEAD']) def index():
    return '' def listToString(s):
    str1 = ""
    for ele in s:
        str1 = str1 + " " + ele
    return str1 def listToString2(s):
    str1 = ""
    for ele in s:
        str1 = str(str1) + " " + str(ele)
    return str1
# Process webhook calls
@app.route(WEBHOOK_URL_PATH, methods=['POST']) def webhook():
    if flask.request.headers.get('content-type') == 'application/json':
        json_string = flask.request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        flask.abort(403) @bot.message_handler(commands=['apply']) def 
apply(message):
    if message.chat.id == admin_chat_id:
        id = message.text.split(' ')[1]
        print(id)
        bot.send_message(message.chat.id, '–û–∫–µ–π. –í–∫–ª—é—á–∞—é –≤–∏–¥–∏–º—ñ—Å—Ç—å.')
        cursor.execute("UPDATE petitions SET visible=1 WHERE 
petition_id=" + str(id))
        cursor.execute("SELECT * FROM petitions WHERE petition_id=" + 
str(id))
        data = cursor.fetchone()
        cursor.execute("UPDATE petitions SET signatures='" + 
str(data[1]) + "' WHERE petition_id=" + str(id))
        bot.send_message(data[1], '–í–∞—à–∞ –ø–µ—Ç–∏—Ü—ñ—è <i>\n\n"' + str(data[4]) 
+ '"</i>\n\n–±—É–ª–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞.',
                         parse_mode='HTML') 
@bot.message_handler(commands=['broadcast']) def 
broadcast_handler(message):
    if message.chat.id == admin_chat_id:
        broadcast_message = message.text.split(" ")
        broadcast_message.pop(0)
        msg = listToString(broadcast_message)
        cursor.execute("SELECT id FROM users")
        ids = cursor.fetchall()
        print(ids)
        count = len(ids)
        new_count = 0
        for id in ids:
            try:
                time.sleep(0.5)
                bot.send_message(id[0], msg)
                new_count += 1
            except:
                pass
        bot.send_message(admin_chat_id, '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ' + str(count) + ' 
–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.\n–û—Ç—Ä–∏–º–∞–ª–∏ ' + str(new_count)) 
@bot.message_handler(commands=['start']) def start_handler(message):
    if message.chat.type == 'private':
        try:
            print(message.from_user.id)
            cursor.execute("SELECT step FROM users WHERE id=" + 
str(message.from_user.id))
            data = cursor.fetchone()
            print(data)
            if data is None:
                cursor.execute("INSERT INTO users(id,step) VALUES('" + 
str(message.from_user.id) + "', 'main_menu')")
                bot.send_message(message.from_user.id, """
                –ü—Ä–∏–≤—ñ—Ç, """ + str(message.from_user.first_name) + """‚ò∫ 
üéìStuditor ‚ùï–¶–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —è–∫–∞ –ø–æ—î–¥–Ω—É—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –±–∞—á–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ 
—É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é, —è–∫–∞ –º–æ–∂–µ —ó—Ö –≤–∏—Ä—ñ—à–∏—Ç–∏
                """, reply_markup=main_menu)
            else:
                bot.send_message(message.from_user.id, """–ü—Ä–∏–≤—ñ—Ç, """ 
+str(message.from_user.first_name)+"""‚ò∫Ô∏è üéìStuditor ‚ùï–¶–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —è–∫–∞ 
–ø–æ—î–¥–Ω—É—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –±–∞—á–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é, 
—è–∫–∞ –º–æ–∂–µ —ó—Ö –≤–∏—Ä—ñ—à–∏—Ç–∏""", reply_markup=main_menu)
                cursor.execute("UPDATE users SET step='main_menu' WHERE 
id="+str(message.from_user.id))
        except:
            pass @bot.message_handler(content_types=['text']) def 
text_handler(message):
    if message.chat.type == 'private':
        cursor.execute("SELECT step FROM users WHERE id=" + 
str(message.from_user.id))
        data = cursor.fetchone()
        print(data)
        if data[0] == "main_menu":
            if message.text == "üöÄ–ü—Ä–æ –ø—Ä–æ–µ–∫—Ç":
                bot.send_message(message.from_user.id, '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ <a 
href="studitor.com">—Å–∞–π—Ç</a>',
                                 reply_markup=about_inline, 
parse_mode='HTML')
            if message.text == "ü§ù–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é":
                bot.send_message(message.from_user.id, '–û–∫–µ–π. –Ø–∫—ñ 
–ø–µ—Ç–∏—Ü—ñ—ó —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω')
            if message.text == "üì¢–ü–æ–¥–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é":
                bot.send_message(message.from_user.id,
                                 "–ß—É–¥–æ–≤–æ. –ó–∞—á–µ–∫–∞–π—Ç–µ —Å–µ–∫—É–Ω–¥—É...",
                                 reply_markup=remove_keyboard)
                cursor.execute("SELECT uni FROM users WHERE id=" + 
str(message.from_user.id))
                uni = cursor.fetchone()
                print(uni)
                if uni[0] is None:
                    bot.send_message(message.from_user.id,
                                     'üßë‚Äçüéì–û–∫–µ–π, –≤–∏–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ 
—É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç',
                                     reply_markup=uni_markup)
                    cursor.execute("UPDATE users SET step='uni_select' 
WHERE id=" + str(message.from_user.id))
                else:
                    cursor.execute("SELECT * FROM users WHERE id=" + 
str(message.from_user.id))
                    data = cursor.fetchone()
                    if data[5] is None:
                        markup = None
                        if data[4] == "–õ–ù–¢–£":
                            markup = LNTU_markup
                        if data[4] == "–°–ù–£":
                            markup = SNU_markup
                        bot.send_message(message.from_user.id,
                                         '–°—Ö–æ–∂–µ –≤–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç. 
–ß–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –≤–∏ –π–æ–≥–æ –æ–±—Ä–∞—Ç–∏?',
                                         reply_markup=markup)
                        cursor.execute("UPDATE users SET 
step='spec_select' WHERE id=" + str(message.from_user.id))
                    else:
                        cursor.execute("UPDATE users SET 
step='uni_reselect' WHERE id=" + str(message.from_user.id))
                        bot.send_message(message.from_user.id,
                                         '–•–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç —ñ 
—Ñ–∞–∫—É–ª—å—Ç–µ—Ç?',
                                         reply_markup=change_uni)
        if data[0] == 'uni_reselect':
            if message.text == '–¢–∞–∫':
                cursor.execute("UPDATE users SET step='uni_select' WHERE 
id=" + str(message.from_user.id))
                bot.send_message(message.from_user.id,
                                 'üßë‚Äçüéì–û–∫–µ–π, –≤–∏–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ 
—É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç',
                                 reply_markup=uni_markup)
            if message.text == '–ù—ñ':
                cursor.execute("UPDATE users SET step='petition_text' 
WHERE id=" + str(message.from_user.id))
                cursor.execute(
                    "INSERT INTO petitions(author, views) VALUES('" + 
str(message.from_user.id) + "','1')")
                cursor.execute(
                    "SELECT MAX(petition_id) FROM petitions WHERE 
author='" + str(message.from_user.id) + "'")
                petition_id = cursor.fetchone()[0]
                cursor.execute(
                    "UPDATE users SET current='" + str(petition_id) + "' 
WHERE id=" + str(message.from_user.id))
                bot.send_message(message.from_user.id,
                                 '‚¨áÔ∏è–ù–∏–∂—á–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ 
–ø—Ä–æ–±–ª–µ–º—É —Ç–∞ –ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω–∏ —É–∂–µ –∑–∞—Ä–∞–∑',
                                 reply_markup=remove_keyboard)
        if data[0] == "uni_select":
            if message.text == '–õ–ù–¢–£':
                bot.send_message(message.from_user.id, "–û–∫–µ–π. –ó —è–∫–æ–≥–æ –≤–∏ 
—Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É?", reply_markup=LNTU_markup)
                cursor.execute("UPDATE users SET uni='–õ–ù–¢–£' WHERE id=" + 
str(message.from_user.id))
                cursor.execute("UPDATE users SET step='spec_select' 
WHERE id=" + str(message.from_user.id))
            if message.text == '–°–ù–£':
                bot.send_message(message.from_user.id, "–û–∫–µ–π. –ó —è–∫–æ–≥–æ –≤–∏ 
—Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É?", reply_markup=SNU_markup)
                cursor.execute("UPDATE users SET uni='–°–ù–£' WHERE id=" + 
str(message.from_user.id))
                cursor.execute("UPDATE users SET step='spec_select' 
WHERE id=" + str(message.from_user.id))
        if data[0] == 'spec_select':
            if message.text == '–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É':
                cursor.execute("UPDATE users SET step='petition_text' 
WHERE id=" + str(message.from_user.id))
                bot.send_message(message.from_user.id,
                                 '‚¨áÔ∏è–ù–∏–∂—á–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ 
–ø—Ä–æ–±–ª–µ–º—É —Ç–∞ –ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω–∏ —É–∂–µ –∑–∞—Ä–∞–∑',
                                 reply_markup=remove_keyboard)
                cursor.execute("INSERT INTO petitions(author, views) 
VALUES('" + str(message.from_user.id) + "','1')")
                cursor.execute(
                    "SELECT MAX(petition_id) FROM petitions WHERE 
author='" + str(message.from_user.id) + "'")
                petition_id = cursor.fetchone()[0]
                cursor.execute(
                    "UPDATE users SET current='" + str(petition_id) + "' 
WHERE id=" + str(message.from_user.id))
            else:
                cursor.execute(
                    'UPDATE users SET spec="' + str(message.text) + '" 
WHERE id=' + str(message.from_user.id))
                bot.send_message(message.from_user.id,
                                 '‚¨áÔ∏è–ù–∏–∂—á–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ 
–ø—Ä–æ–±–ª–µ–º—É —Ç–∞ –ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω–∏ —É–∂–µ –∑–∞—Ä–∞–∑',
                                 reply_markup=remove_keyboard)
                cursor.execute("INSERT INTO petitions(author, views) 
VALUES('" + str(message.from_user.id) + "','1')")
                cursor.execute(
                    "SELECT MAX(petition_id) FROM petitions WHERE 
author='" + str(message.from_user.id) + "'")
                petition_id = cursor.fetchone()[0]
                cursor.execute(
                    "UPDATE users SET current='" + str(petition_id) + "' 
WHERE id=" + str(message.from_user.id))
                cursor.execute("UPDATE users SET step='petition_text' 
WHERE id=" + str(message.from_user.id))
        """if data[0] == 'petition_header':
            cursor.execute("SELECT current FROM users WHERE 
id="+str(message.from_user.id))
            petition_id = cursor.fetchone()[0]
            cursor.execute("UPDATE petitions SET 
heading='"+str(message.text)+"' WHERE petition_id="+str(petition_id))
            bot.send_message(message.from_user.id, "‚¨áÔ∏è–ù–∏–∂—á–µ –≤–∏ –º–æ–∂–µ—Ç–µ 
–ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É —Ç–∞ –ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω–∏ —É–∂–µ –∑–∞—Ä–∞–∑")
            cursor.execute("UPDATE users SET step='petition_text' WHERE 
id=" + str(message.from_user.id))"""
        if data[0] == 'petition_text':
            cursor.execute("SELECT current FROM users WHERE id=" + 
str(message.from_user.id))
            petition_id = cursor.fetchone()[0]
            cursor.execute("""UPDATE petitions SET text=\"""" + 
str(message.text) + """\" WHERE petition_id=""" + str(petition_id))
            cursor.execute("SELECT author FROM users WHERE id=" + 
str(message.from_user.id))
            author = cursor.fetchone()[0]
            print(author)
            if author is None:
                new_author = petition_id
                cursor.execute("UPDATE users SET author='" + 
str(new_author) + "' WHERE id=" + str(message.chat.id))
            else:
                new_author = str(author) + ' ' + str(petition_id)
                cursor.execute("UPDATE users SET author='" + 
str(new_author) + "' WHERE id=" + str(message.chat.id))
            bot.send_message(message.from_user.id,
                             'üí°–î—è–∫—É—î–º–æ –∑–∞ —Ç–µ, —â–æ –ø–æ–≤—ñ–¥–æ–º–∏–ª–∏ –ø—Ä–æ 
–ø—Ä–æ–±–ª–µ–º—É. –í–∞—à–∞ –ø–µ—Ç–∏—Ü—ñ—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –≤–æ–Ω–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ 
–¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è.')
            bot.send_message(message.from_user.id, """
                            –ü—Ä–∏–≤—ñ—Ç, """ + 
str(message.from_user.first_name) + """‚ò∫\nüéìStuditor\n‚ùï–¶–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, 
—è–∫–∞ –ø–æ—î–¥–Ω—É—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –±–∞—á–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ–≤ —Ç–∞ 
–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é, —è–∫–∞ –º–æ–∂–µ —ó—Ö –≤–∏—Ä—ñ—à–∏—Ç–∏
                            """, reply_markup=main_menu)
            cursor.execute("UPDATE users SET step='main_menu' WHERE id=" 
+ str(message.from_user.id))
            cursor.execute("SELECT current FROM users WHERE id=" + 
str(message.from_user.id))
            petition_id = cursor.fetchone()[0]
            cursor.execute("SELECT * FROM petitions WHERE petition_id=" 
+ str(petition_id))
            petition_info = cursor.fetchone()
            cursor.execute("UPDATE users SET current='0' WHERE id=" + 
str(message.from_user.id))
            bot.send_message(admin_chat_id, '<b>–ù–æ–≤–∞ –ø–µ—Ç–∏—Ü—ñ—è!</b>''\n' + 
str(
                petition_info[4]) + '\n\n–í–∫–ª—é—á–∏—Ç–∏ –≤–∏–¥–∏–º—ñ—Å—Ç—å: 
<code>/apply ' + str(petition_info[0]) + '</code>',
                             parse_mode='HTML')
# Remove webhook, it fails sometimes the set if there is a previous 
# webhook
bot.remove_webhook() time.sleep(0.1)
# Set webhook
bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
                certificate=open(WEBHOOK_SSL_CERT, 'r'))
# Start flask server
app.run(host=WEBHOOK_LISTEN,
        port=WEBHOOK_PORT,
        ssl_context=(WEBHOOK_SSL_CERT, WEBHOOK_SSL_PRIV),
        debug=True)
